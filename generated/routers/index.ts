/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { unsetMarker, AnyRouter, AnyRootConfig, CreateRouterInner, Procedure, ProcedureBuilder, ProcedureParams, ProcedureRouterRecord, ProcedureType } from "@trpc/server";
import type { PrismaClient } from "@prisma/client";
import createAccountRouter from "./Account.router";
import createCustomUserRouter from "./CustomUser.router";
import createOwnerRouter from "./Owner.router";
import createFieldRouter from "./Field.router";
import createSubFieldRouter from "./SubField.router";
import createBookingRouter from "./Booking.router";
import createReviewRouter from "./Review.router";
import createOpeningHoursRouter from "./OpeningHours.router";
import createMaintenanceScheduleRouter from "./MaintenanceSchedule.router";

export type BaseConfig = AnyRootConfig;

export type RouterFactory<Config extends BaseConfig> = <
    ProcRouterRecord extends ProcedureRouterRecord
>(
    procedures: ProcRouterRecord
) => CreateRouterInner<Config, ProcRouterRecord>;

export type UnsetMarker = typeof unsetMarker;

export type ProcBuilder<Config extends BaseConfig> = ProcedureBuilder<
    ProcedureParams<Config, any, any, any, UnsetMarker, UnsetMarker, any>
>;

export function db(ctx: any) {
    if (!ctx.prisma) {
        throw new Error('Missing "prisma" field in trpc context');
    }
    return ctx.prisma as PrismaClient;
}

export function createRouter<Config extends BaseConfig>(router: RouterFactory<Config>, procedure: ProcBuilder<Config>) {
    return router({
        account: createAccountRouter(router, procedure),
        customUser: createCustomUserRouter(router, procedure),
        owner: createOwnerRouter(router, procedure),
        field: createFieldRouter(router, procedure),
        subField: createSubFieldRouter(router, procedure),
        booking: createBookingRouter(router, procedure),
        review: createReviewRouter(router, procedure),
        openingHours: createOpeningHoursRouter(router, procedure),
        maintenanceSchedule: createMaintenanceScheduleRouter(router, procedure),
    }
    );
}
